'''
Mount the external drive and run with the desired option
'''

import os
import argparse
import sys

# parser = argparse.ArgumentParser()
# parser.add_argument('--option', '-o', type=int,
#         help='What set of arguments to do',
#         dest='argument_option', default=None)
# args = parser.parse_args()

# if args.argument_option is None:
#     raise ValueError('No arguemnt passsed')

f = open('output/args.txt', 'r')
argument_option = int(f.read())
f.close()


# [
#   N replicates,
#   N times,
#   Data Seed,
#   Init Seed,
#   Measurement noise,
#   Process variance,
#   Uniform_sampling,
#   Boxplot type]
arguments_global = [
    # Times 35
    [5, 35, 0, 0, 0.3, 0.05, 1, 2],
    [5, 35, 1, 0, 0.3, 0.05, 1, 2],
    [5, 35, 2, 0, 0.3, 0.05, 1, 2],
    [5, 35, 3, 0, 0.3, 0.05, 1, 2],
    [5, 35, 4, 0, 0.3, 0.05, 1, 2],
    [5, 35, 5, 0, 0.3, 0.05, 1, 2],
    [5, 35, 6, 0, 0.3, 0.05, 1, 2],
    [5, 35, 7, 0, 0.3, 0.05, 1, 2],
    [5, 35, 8, 0, 0.3, 0.05, 1, 2],
    [5, 35, 9, 0, 0.3, 0.05, 1, 2],

    # Times 45
    [5, 45, 0, 0, 0.3, 0.05, 1, 2],
    [5, 45, 1, 0, 0.3, 0.05, 1, 2],
    [5, 45, 2, 0, 0.3, 0.05, 1, 2],
    [5, 45, 3, 0, 0.3, 0.05, 1, 2],
    [5, 45, 4, 0, 0.3, 0.05, 1, 2],
    [5, 45, 5, 0, 0.3, 0.05, 1, 2],
    [5, 45, 6, 0, 0.3, 0.05, 1, 2],
    [5, 45, 7, 0, 0.3, 0.05, 1, 2],
    [5, 45, 8, 0, 0.3, 0.05, 1, 2],
    [5, 45, 9, 0, 0.3, 0.05, 1, 2],

    # Times 50
    [5, 50, 0, 0, 0.3, 0.05, 1, 2],
    [5, 50, 1, 0, 0.3, 0.05, 1, 2],
    [5, 50, 2, 0, 0.3, 0.05, 1, 2],
    [5, 50, 3, 0, 0.3, 0.05, 1, 2],
    [5, 50, 4, 0, 0.3, 0.05, 1, 2],
    [5, 50, 5, 0, 0.3, 0.05, 1, 2],
    [5, 50, 6, 0, 0.3, 0.05, 1, 2],
    [5, 50, 7, 0, 0.3, 0.05, 1, 2],
    [5, 50, 8, 0, 0.3, 0.05, 1, 2],
    [5, 50, 9, 0, 0.3, 0.05, 1, 2],

    # Times 55
    [5, 55, 0, 0, 0.3, 0.05, 1, 2],
    [5, 55, 1, 0, 0.3, 0.05, 1, 2],
    [5, 55, 2, 0, 0.3, 0.05, 1, 2],
    [5, 55, 3, 0, 0.3, 0.05, 1, 2],
    [5, 55, 4, 0, 0.3, 0.05, 1, 2],
    [5, 55, 5, 0, 0.3, 0.05, 1, 2],
    [5, 55, 6, 0, 0.3, 0.05, 1, 2],
    [5, 55, 7, 0, 0.3, 0.05, 1, 2],
    [5, 55, 8, 0, 0.3, 0.05, 1, 2],
    [5, 55, 9, 0, 0.3, 0.05, 1, 2],

    # Times 65
    [5, 65, 0, 0, 0.3, 0.05, 1, 2],
    [5, 65, 1, 0, 0.3, 0.05, 1, 2],
    [5, 65, 2, 0, 0.3, 0.05, 1, 2],
    [5, 65, 3, 0, 0.3, 0.05, 1, 2],
    [5, 65, 4, 0, 0.3, 0.05, 1, 2],
    [5, 65, 5, 0, 0.3, 0.05, 1, 2],
    [5, 65, 6, 0, 0.3, 0.05, 1, 2],
    [5, 65, 7, 0, 0.3, 0.05, 1, 2],
    [5, 65, 8, 0, 0.3, 0.05, 1, 2],
    [5, 65, 9, 0, 0.3, 0.05, 1, 2],

    # Noise 0.1
    [5, 55, 0, 0, 0.1, 0.05, 0, 0],
    [5, 55, 1, 0, 0.1, 0.05, 0, 0],
    [5, 55, 2, 0, 0.1, 0.05, 0, 0],
    [5, 55, 3, 0, 0.1, 0.05, 0, 0],
    [5, 55, 4, 0, 0.1, 0.05, 0, 0],
    [5, 55, 5, 0, 0.1, 0.05, 0, 0],
    [5, 55, 6, 0, 0.1, 0.05, 0, 0],
    [5, 55, 7, 0, 0.1, 0.05, 0, 0],
    [5, 55, 8, 0, 0.1, 0.05, 0, 0],
    [5, 55, 9, 0, 0.1, 0.05, 0, 0],

    # Noise 0.15
    [5, 55, 0, 0, 0.15, 0.05, 0, 0],
    [5, 55, 1, 0, 0.15, 0.05, 0, 0],
    [5, 55, 2, 0, 0.15, 0.05, 0, 0],
    [5, 55, 3, 0, 0.15, 0.05, 0, 0],
    [5, 55, 4, 0, 0.15, 0.05, 0, 0],
    [5, 55, 5, 0, 0.15, 0.05, 0, 0],
    [5, 55, 6, 0, 0.15, 0.05, 0, 0],
    [5, 55, 7, 0, 0.15, 0.05, 0, 0],
    [5, 55, 8, 0, 0.15, 0.05, 0, 0],
    [5, 55, 9, 0, 0.15, 0.05, 0, 0],

    # Noise 0.2
    [5, 55, 0, 0, 0.2, 0.05, 0, 0],
    [5, 55, 1, 0, 0.2, 0.05, 0, 0],
    [5, 55, 2, 0, 0.2, 0.05, 0, 0],
    [5, 55, 3, 0, 0.2, 0.05, 0, 0],
    [5, 55, 4, 0, 0.2, 0.05, 0, 0],
    [5, 55, 5, 0, 0.2, 0.05, 0, 0],
    [5, 55, 6, 0, 0.2, 0.05, 0, 0],
    [5, 55, 7, 0, 0.2, 0.05, 0, 0],
    [5, 55, 8, 0, 0.2, 0.05, 0, 0],
    [5, 55, 9, 0, 0.2, 0.05, 0, 0],

    # Noise 0.3
    [5, 55, 0, 0, 0.3, 0.05, 0, 0],
    [5, 55, 1, 0, 0.3, 0.05, 0, 0],
    [5, 55, 2, 0, 0.3, 0.05, 0, 0],
    [5, 55, 3, 0, 0.3, 0.05, 0, 0],
    [5, 55, 4, 0, 0.3, 0.05, 0, 0],
    [5, 55, 5, 0, 0.3, 0.05, 0, 0],
    [5, 55, 6, 0, 0.3, 0.05, 0, 0],
    [5, 55, 7, 0, 0.3, 0.05, 0, 0],
    [5, 55, 8, 0, 0.3, 0.05, 0, 0],
    [5, 55, 9, 0, 0.3, 0.05, 0, 0],

    # Noise 0.4
    [5, 55, 0, 0, 0.4, 0.05, 0, 0],
    [5, 55, 1, 0, 0.4, 0.05, 0, 0],
    [5, 55, 2, 0, 0.4, 0.05, 0, 0],
    [5, 55, 3, 0, 0.4, 0.05, 0, 0],
    [5, 55, 4, 0, 0.4, 0.05, 0, 0],
    [5, 55, 5, 0, 0.4, 0.05, 0, 0],
    [5, 55, 6, 0, 0.4, 0.05, 0, 0],
    [5, 55, 7, 0, 0.4, 0.05, 0, 0],
    [5, 55, 8, 0, 0.4, 0.05, 0, 0],
    [5, 55, 9, 0, 0.4, 0.05, 0, 0],

    # Replicates 2
    [2, 55, 0, 0, 0.3, 0.05, 0, 1],
    [2, 55, 1, 0, 0.3, 0.05, 0, 1],
    [2, 55, 2, 0, 0.3, 0.05, 0, 1],
    [2, 55, 3, 0, 0.3, 0.05, 0, 1],
    [2, 55, 4, 0, 0.3, 0.05, 0, 1],
    [2, 55, 5, 0, 0.3, 0.05, 0, 1],
    [2, 55, 6, 0, 0.3, 0.05, 0, 1],
    [2, 55, 7, 0, 0.3, 0.05, 0, 1],
    [2, 55, 8, 0, 0.3, 0.05, 0, 1],
    [2, 55, 9, 0, 0.3, 0.05, 0, 1],

    # Replicates 3
    [3, 55, 0, 0, 0.3, 0.05, 0, 1],
    [3, 55, 1, 0, 0.3, 0.05, 0, 1],
    [3, 55, 2, 0, 0.3, 0.05, 0, 1],
    [3, 55, 3, 0, 0.3, 0.05, 0, 1],
    [3, 55, 4, 0, 0.3, 0.05, 0, 1],
    [3, 55, 5, 0, 0.3, 0.05, 0, 1],
    [3, 55, 6, 0, 0.3, 0.05, 0, 1],
    [3, 55, 7, 0, 0.3, 0.05, 0, 1],
    [3, 55, 8, 0, 0.3, 0.05, 0, 1],
    [3, 55, 9, 0, 0.3, 0.05, 0, 1],

    # Replicates 4
    [4, 55, 0, 0, 0.3, 0.05, 0, 1],
    [4, 55, 1, 0, 0.3, 0.05, 0, 1],
    [4, 55, 2, 0, 0.3, 0.05, 0, 1],
    [4, 55, 3, 0, 0.3, 0.05, 0, 1],
    [4, 55, 4, 0, 0.3, 0.05, 0, 1],
    [4, 55, 5, 0, 0.3, 0.05, 0, 1],
    [4, 55, 6, 0, 0.3, 0.05, 0, 1],
    [4, 55, 7, 0, 0.3, 0.05, 0, 1],
    [4, 55, 8, 0, 0.3, 0.05, 0, 1],
    [4, 55, 9, 0, 0.3, 0.05, 0, 1]

    # # Replicates 5
    # [5, 55, 0, 0, 0.3, 0.05, 0, 1],
    # [5, 55, 1, 0, 0.3, 0.05, 0, 1],
    # [5, 55, 2, 0, 0.3, 0.05, 0, 1],
    # [5, 55, 3, 0, 0.3, 0.05, 0, 1],
    # [5, 55, 4, 0, 0.3, 0.05, 0, 1],
    # [5, 55, 5, 0, 0.3, 0.05, 0, 1],
    # [5, 55, 6, 0, 0.3, 0.05, 0, 1],
    # [5, 55, 7, 0, 0.3, 0.05, 0, 1],
    # [5, 55, 8, 0, 0.3, 0.05, 0, 1],
    # [5, 55, 9, 0, 0.3, 0.05, 0, 1]
]

if argument_option >= len(arguments_global):
    raise ValueError('`argument_option` ({}) too large. {} max'.format(
        argument_option, len(arguments_global)-1))

mesh = arguments_global[argument_option]
n_replicates = mesh[0]
n_timepoints = mesh[1]
data_seed = mesh[2]
init_seed = mesh[3]
measurement_noise = mesh[4]
process_variance = mesh[5]
uniform_sampling = mesh[6]
boxplot_type = mesh[7]


# Make the base data
base_data_path = 'output/base_data/'
command = 'python make_subjsets.py -b {} -nr 3 4 5 -m 0.1 0.15 0.2 0.3 0.4 -p 0.05 -d 10 -dset semi-synthetic -nt 35 45 50 55 65'.format(base_data_path)
print('EXECUTING:', command)
os.system(command)

print('Arguments: {}'.format(arguments_global[argument_option]))

# Run the docker
output_path = 'output/'
command = 'python main_mcmc.py -d {} -i {} -m {} -p {} -b {} -db {} -ns {} -nb {} -nt {} -nr {} -us {}'.format(
    data_seed, init_seed, measurement_noise, process_variance, output_path, base_data_path,
    100, 50, n_timepoints, n_replicates, uniform_sampling)
print('EXECUTING:', command)
os.system(command)
